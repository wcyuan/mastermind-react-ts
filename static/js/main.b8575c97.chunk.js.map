{"version":3,"sources":["mastermind.tsx","index.js"],"names":["AllValuesIterator","PossibleValuesIterator","Result","exact","partial","this","other","output","msg","alert","Player","game","message","history","prompt","split","num_tries","ii","guess","get_input","is_valid_guess","print_guess_instructions","Game","width","valid_values","min","max","Math","floor","random","lst","random_int","length","push","random_choice","value","indexOf","sub_guesses","get_all_valid_guesses","all_guesses","concat","reduce","a","b","arr","arrs","map","val","i","index","secret","zip","sum","elt","filter","uniq","count","result","join","player_class","max_guesses","max_tries_per_guess","player","get_random_guess","num_guess","get_guess","check_guess","is_correct","guess_string","indexes","values","slice","place","itr","next","done","match","hist","equals","AutoPlayer","_cached_possible_guesses","_history_for_cached_possible_guesses","_is_cache_valid","hist1","hist2","matches","history_matches","is_possible_guesses_computed","get_possible_guesses","make_guess","Peg","props","style","backgroundColor","color","className","size","onClick","disabled","text","EvalPeg","GuessPeg","HistoryPeg","Row","items","key","Util","getColor","num_left","NextGuessRow","state","setState","auto","onSubmit","handleClick","makeAutoGuess","Component","rainbow","numOfSteps","step","r","g","h","f","q","toString","EntryBox","type","onChange","onFocus","event","target","select","GameUI","getNewState","numColors","mastermind","makeGame","firstguess","Date","force_num_left","pow","get_num_possible_guesses","updateHistory","make_random_guess","past_guesses","setNumColors","bind","setWidth","newGame","newOneMoveGame","getAutoGuess","handleNewGuess","App","name","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8575c97.chunk.js","sourcesContent":["// Python version here:\r\n//   https://colab.research.google.com/drive/1Tv5MlRq3l7CqIM9hpt9OpD1KnjslAyy6\r\ntype Value = string;\r\ntype Guess = Value[];\r\nexport class Result {\r\n  readonly exact: number;\r\n  readonly partial: number;\r\n  constructor(exact: number, partial: number) {\r\n    this.exact = exact;\r\n    this.partial = partial;\r\n  }\r\n  equals(other: Result) {\r\n    return this.exact === other.exact && this.partial === other.partial;\r\n  }\r\n  str() {\r\n    return \"\" + this.exact + \", \" + this.partial;\r\n  }\r\n}\r\ntype History = Array<[Guess, Result]>;\r\n\r\nexport function output(msg:string) {\r\n  alert(msg);\r\n  // console.log(msg);\r\n}\r\n\r\nexport function input(msg:string) {\r\n  prompt(msg);\r\n  return \"auto\";\r\n}\r\n\r\n// -------------------------------------------------------------- //\r\n\r\nexport class Player {\r\n  readonly game: Game;\r\n  constructor(game: Game) {\r\n    this.game = game;\r\n  }\r\n\r\n  get_input(message: string, history: History) {\r\n    return input(message).split(\"\");\r\n  }\r\n\r\n  print_guess_instructions() {}\r\n\r\n  get_guess(num_tries = 4, history: History):Guess {\r\n    for (var ii = 0; ii < num_tries; ii++) {\r\n      let guess = this.get_input(\"Enter a guess: \", history);\r\n      if (this.game.is_valid_guess(guess)) {\r\n        return guess;\r\n      }\r\n      output(\"Invalid guess\");\r\n      this.print_guess_instructions();\r\n    }\r\n    output(\"Too many invalid guesses\");\r\n    return [];\r\n  }\r\n}\r\n\r\n// -------------------------------------------------------------- //\r\n\r\nexport class Game {\r\n  readonly width: number;\r\n  readonly valid_values: Value[];\r\n  constructor(width = 4, valid_values = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) {\r\n    this.width = width;\r\n    this.valid_values = valid_values;\r\n  }\r\n  random_int(min:number, max:number) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  random_choice(lst:any[]) {\r\n    return lst[this.random_int(0, lst.length - 1)];\r\n  }\r\n  get_random_guess() {\r\n    let guess = [];\r\n    for (let ii = 0; ii < this.width; ii++) {\r\n      guess.push(this.random_choice(this.valid_values));\r\n    }\r\n    return guess;\r\n  }\r\n  is_valid_guess(guess: Guess) {\r\n    if (guess.length !== this.width) {\r\n      return false;\r\n    }\r\n    for (let value of guess) {\r\n      if (this.valid_values.indexOf(value) < 0) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  get_all_valid_guesses(width?: number) {\r\n    if (!width) {\r\n      width = this.width;\r\n    }\r\n    let sub_guesses: Guess[];\r\n    if (width < 2) {\r\n      sub_guesses = [[]];\r\n    } else {\r\n      sub_guesses = this.get_all_valid_guesses(width - 1);\r\n    }\r\n    let all_guesses = [];\r\n    for (let guess of sub_guesses) {\r\n      for (let value of this.valid_values) {\r\n        all_guesses.push([value].concat(guess));\r\n      }\r\n    }\r\n    return all_guesses;\r\n  }\r\n  sum(lst:any[]) {\r\n    return lst.reduce((a, b) => a + b, 0);\r\n  }\r\n  count(lst:any[], value:Value) {\r\n    return lst.reduce((a, b) => a + (b === value ? 1 : 0), 0);\r\n  }\r\n  // https://gist.github.com/renaudtertrais/25fc5a2e64fe5d0e86894094c6989e10\r\n  zip(arr:any[], ...arrs:any[]) {\r\n    return arr.map((val, i) => arrs.reduce((a, arr) => [...a, arr[i]], [val]));\r\n  }\r\n  //\r\n  // https://stackoverflow.com/questions/22015684/how-do-i-zip-two-arrays-in-javascript\r\n  //zip(arr1, arr2) {\r\n  //  return arr1.map((elt, i) => [elt, arr2[i]]);\r\n  //}\r\n  // https://stackoverflow.com/questions/1960473/get-all-unique-values-in-a-javascript-array-remove-duplicates\r\n  uniq(value:Value, index:number, arr:any[]) {\r\n    return arr.indexOf(value) === index;\r\n  }\r\n  check_guess(secret: Guess, guess: Guess):Result {\r\n    let exact = this.zip(secret, guess).reduce(\r\n      (sum, elt) => sum + (elt[0] === elt[1] ? 1 : 0),\r\n      0\r\n    );\r\n    let partial = guess\r\n      .filter(this.uniq)\r\n      .reduce(\r\n        (sum, val) =>\r\n          sum + Math.min(this.count(secret, val), this.count(guess, val)),\r\n        0\r\n      );\r\n    return new Result(exact, partial - exact);\r\n  }\r\n  is_correct(result: Result) {\r\n    return result.exact === this.width;\r\n  }\r\n  guess_string(guess: Guess) {\r\n    return guess.join(\"\");\r\n  }\r\n  play(player_class: new (arg0: this) => Player, max_guesses = 10, max_tries_per_guess = 4) {\r\n    let player = new player_class(this);\r\n    let secret = this.get_random_guess();\r\n    let history : History = [];\r\n    for (let num_guess = 0; num_guess < max_guesses; num_guess++) {\r\n      let guess = player.get_guess(max_tries_per_guess, history);\r\n      let result = this.check_guess(secret, guess);\r\n      history.push([guess, result]);\r\n      if (this.is_correct(result)) {\r\n        output(\"You got it!\");\r\n        return [true, history, secret];\r\n      } else {\r\n        output(result.exact + \" exact, \" + result.partial + \" partial.\");\r\n      }\r\n    }\r\n    output(\"You didn't get it: \" + this.guess_string(secret));\r\n    return [false, history, secret];\r\n  }\r\n}\r\n\r\n// -------------------------------------------------------------- //\r\n\r\nfunction* AllValuesIterator(valid_values: Value[], width: number) {\r\n  if (width <= 0 || valid_values.length <= 0) {\r\n    return;\r\n  }\r\n  let indexes = [];\r\n  let values = [];\r\n  for (let ii = 0; ii < width; ii++) {\r\n    indexes.push(0);\r\n    values.push(valid_values[0]);\r\n  }\r\n  while (true) {\r\n    yield values.slice();\r\n    indexes[0] += 1;\r\n    for (let place = 0; place < indexes.length; place++) {\r\n      if (indexes[place] >= valid_values.length) {\r\n        indexes[place] = 0;\r\n        if (place + 1 < indexes.length) {\r\n          indexes[place + 1] += 1;\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n      values[place] = valid_values[indexes[place]];\r\n    }\r\n  }\r\n}\r\n\r\nfunction* PossibleValuesIterator(game: Game, history: History) {\r\n  let itr = AllValuesIterator(game.valid_values, game.width);\r\n  let next = itr.next();\r\n  while (!next.done) {\r\n    let guess = next.value;\r\n    let match = true;\r\n    for (let hist of history) {\r\n      let result = game.check_guess(hist[0], guess);\r\n      if (!result.equals(hist[1])) {\r\n        match = false;\r\n        break;\r\n      }\r\n    }\r\n    if (match) {\r\n      yield guess;\r\n    }\r\n    next = itr.next();\r\n  }\r\n  return;\r\n}\r\n\r\nexport class AutoPlayer extends Player {\r\n  _cached_possible_guesses: Guess[];\r\n  _history_for_cached_possible_guesses: History;\r\n  _is_cache_valid: boolean;\r\n  constructor(game: Game) {\r\n    super(game);\r\n    this._cached_possible_guesses = [];\r\n    this._history_for_cached_possible_guesses = [];\r\n    this._is_cache_valid = false;\r\n  }\r\n  history_matches(hist1: History, hist2: History) {\r\n    if (hist1 == null && hist2 == null) {\r\n      return true;\r\n    }\r\n    if (hist1 == null || hist2 == null) {\r\n      return false;\r\n    }\r\n    if (hist1.length !== hist2.length) {\r\n      return false;\r\n    }\r\n    for (let ii = 0; ii < hist1.length; ii++) {\r\n      if (hist1[ii] !== hist2[ii]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  is_possible_guesses_computed(history: History) {\r\n    if (!this._is_cache_valid) {\r\n      return false;\r\n    }\r\n    let matches = this.history_matches(\r\n      history,\r\n      this._history_for_cached_possible_guesses\r\n    );\r\n    if (!matches) {\r\n      this._is_cache_valid = false;\r\n    }\r\n    return matches;\r\n  }\r\n  get_possible_guesses(history: History) {\r\n    if (!this.is_possible_guesses_computed(history)) {\r\n      this._cached_possible_guesses = [];\r\n      // TODO: This always recomputes possible values from\r\n      // scratch, but if the _cached_possible_guesses already\r\n      // satisfy all the history except the last element,\r\n      // then we only need to throw out the ones that don't\r\n      // match the last element of history.\r\n      let itr = PossibleValuesIterator(this.game, history);\r\n      let next = itr.next();\r\n      while (!next.done) {\r\n        this._cached_possible_guesses.push(next.value);\r\n        next = itr.next();\r\n      }\r\n      this._history_for_cached_possible_guesses = history.slice();\r\n      this._is_cache_valid = true;\r\n    }\r\n    return this._cached_possible_guesses;\r\n  }\r\n  get_num_possible_guesses(history: History) {\r\n    return this.get_possible_guesses(history).length;\r\n  }\r\n  make_guess(history: History):Guess {\r\n    if (this.is_possible_guesses_computed(history)) {\r\n      return this.get_possible_guesses(history)[0];\r\n    } else {\r\n      let itr = PossibleValuesIterator(this.game, history);\r\n      let next = itr.next();\r\n      if (next.done) {\r\n        return [];\r\n      } else {\r\n        return next.value;\r\n      }\r\n    }\r\n  }\r\n  make_random_guess(history: History) {\r\n    return this.game.random_choice(this.get_possible_guesses(history));\r\n  }\r\n  get_guess(num_tries = 4, history: History):Guess {\r\n    let guess = this.make_guess(history);\r\n    output(\"Guessed: \" + this.game.guess_string(guess));\r\n    return guess;\r\n  }\r\n}\r\n\r\n// -------------------------------------------------------------- //\r\n\r\nexport class RandomPlayer extends AutoPlayer {\r\n  make_guess(history: History) {\r\n    return this.make_random_guess(history);\r\n  }\r\n}\r\n\r\n// -------------------------------------------------------------- //\r\n\r\nexport class MaybeAutoPlayer extends AutoPlayer {\r\n  get_guess(num_tries = 4, history: History):Guess {\r\n    return Player.prototype.get_guess.call(this, num_tries, history);\r\n  }\r\n  get_input(msg: string, history: History):Guess {\r\n    let guess = Player.prototype.get_input.call(this, msg, history);\r\n    if (this.game.is_correct(this.game.check_guess(guess, \"auto\".split(\"\")))) {\r\n      return AutoPlayer.prototype.get_guess.call(this, 0, history);\r\n    } else {\r\n      return guess;\r\n    }\r\n  }\r\n}\r\n\r\n// -------------------------------------------------------------- //\r\n","import React, { Component } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport \"./style.css\";\r\nimport * as mastermind from \"./mastermind\";\r\n\r\nfunction Peg(props) {\r\n  const style = { backgroundColor: props.color };\r\n  const className = [props.size, \"peg\"].join(\" \");\r\n  return (\r\n    <button\r\n      className={className}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n      style={style}\r\n    >\r\n      {props.text}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction EvalPeg(props) {\r\n  return Peg({ color: props.color, size: \"small\", disabled: true });\r\n}\r\n\r\nfunction GuessPeg(props) {\r\n  return Peg({\r\n    color: props.color,\r\n    onClick: props.onClick,\r\n    size: \"biggest\",\r\n    disabled: false,\r\n    text: props.text\r\n  });\r\n}\r\n\r\nfunction HistoryPeg(props) {\r\n  return Peg({ color: props.color, text: props.text, size: \"big\" });\r\n}\r\n\r\nfunction Row(props) {\r\n  const items = [];\r\n  for (let ii = 0; ii < props.guess.length; ii++) {\r\n    items.push(\r\n      <HistoryPeg\r\n        key={ii}\r\n        text={props.guess[ii]}\r\n        color={Util.getColor(props.game, props.guess[ii])}\r\n      />\r\n    );\r\n  }\r\n  for (let ii = 0; ii < props.result.exact; ii++) {\r\n    items.push(<EvalPeg color=\"red\" key={\"exact\" + ii} />);\r\n  }\r\n  for (let ii = 0; ii < props.result.partial; ii++) {\r\n    items.push(<EvalPeg color=\"white\" key={\"partial\" + ii} />);\r\n  }\r\n  return (\r\n    <div>\r\n      {items} ({props.num_left})\r\n    </div>\r\n  );\r\n}\r\n\r\nclass NextGuessRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      guess: []\r\n    };\r\n    if (\"guess\" in props && props.guess != null) {\r\n      this.state.guess = props.guess;\r\n    } else {\r\n      for (let ii = 0; ii < this.props.game.width; ii++) {\r\n        this.state.guess.push(\r\n          this.props.game.valid_values[ii % this.props.game.valid_values.length]\r\n        );\r\n      }\r\n    }\r\n  }\r\n  handleClick(ii) {\r\n    let guess = this.state.guess.slice();\r\n    const value = guess[ii];\r\n    let index = this.props.game.valid_values.indexOf(value);\r\n    index = (index + 1) % this.props.game.valid_values.length;\r\n    guess[ii] = this.props.game.valid_values[index];\r\n    this.setState({ guess: guess });\r\n  }\r\n  makeAutoGuess() {\r\n    const guess = this.props.auto();\r\n    this.setState({ guess: guess });\r\n    this.props.onSubmit(guess);\r\n  }\r\n  render() {\r\n    const items = [];\r\n    for (let ii = 0; ii < this.props.game.width; ii++) {\r\n      items.push(\r\n        <GuessPeg\r\n          key={ii}\r\n          text={this.state.guess[ii]}\r\n          color={Util.getColor(this.props.game, this.state.guess[ii])}\r\n          onClick={() => this.handleClick(ii)}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        {items}\r\n        <button onClick={() => this.props.onSubmit(this.state.guess)}>\r\n          Guess\r\n        </button>\r\n        <button onClick={() => this.makeAutoGuess()}>Auto Guess</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Util {\r\n  static getColor(game, value) {\r\n    return Util.rainbow(\r\n      game.valid_values.length,\r\n      game.valid_values.indexOf(value)\r\n    );\r\n  }\r\n  //  https://stackoverflow.com/a/7419630\r\n  static rainbow(numOfSteps, step) {\r\n    // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering).\r\n    // This is ideal for creating easily distinguishable vibrant markers in\r\n    // Google Maps and other apps.\r\n    // Adam Cole, 2011-Sept-14\r\n    // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\r\n    var r, g, b;\r\n    var h = step / numOfSteps;\r\n    var i = ~~(h * 6);\r\n    var f = h * 6 - i;\r\n    var q = 1 - f;\r\n    switch (i % 6) {\r\n      case 0:\r\n        r = 1;\r\n        g = f;\r\n        b = 0;\r\n        break;\r\n      case 1:\r\n        r = q;\r\n        g = 1;\r\n        b = 0;\r\n        break;\r\n      case 2:\r\n        r = 0;\r\n        g = 1;\r\n        b = f;\r\n        break;\r\n      case 3:\r\n        r = 0;\r\n        g = q;\r\n        b = 1;\r\n        break;\r\n      case 4:\r\n        r = f;\r\n        g = 0;\r\n        b = 1;\r\n        break;\r\n      case 5:\r\n        r = 1;\r\n        g = 0;\r\n        b = q;\r\n        break;\r\n    }\r\n    var c =\r\n      \"#\" +\r\n      (\"00\" + (~~(r * 255)).toString(16)).slice(-2) +\r\n      (\"00\" + (~~(g * 255)).toString(16)).slice(-2) +\r\n      (\"00\" + (~~(b * 255)).toString(16)).slice(-2);\r\n    return c;\r\n  }\r\n}\r\n\r\nfunction EntryBox(props) {\r\n  return (\r\n    <input\r\n      type=\"number\"\r\n      value={props.value}\r\n      onChange={props.onChange}\r\n      onFocus={event => event.target.select()}\r\n      style={{ width: \"25px\" }}\r\n    />\r\n  );\r\n}\r\n\r\nclass GameUI extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.getNewState(props.numColors, props.width);\r\n  }\r\n  makeGame(numColors, width) {\r\n    let valid_values = [];\r\n    for (let ii = 0; ii < numColors; ii++) {\r\n      valid_values.push(\"\" + ii);\r\n    }\r\n    return new mastermind.Game(width, valid_values);\r\n  }\r\n  getNewState(numColors, width) {\r\n    const game = this.makeGame(numColors, width);\r\n    return {\r\n      game: game,\r\n      width: width,\r\n      numColors: numColors,\r\n      secret: game.get_random_guess(),\r\n      history: [],\r\n      auto: new mastermind.AutoPlayer(game),\r\n      firstguess: null,\r\n      // Set a key to make it easy to reset components\r\n      // https://stackoverflow.com/a/21750576\r\n      key: new Date()\r\n    };\r\n  }\r\n  setWidth(event) {\r\n    this.setState(this.getNewState(this.state.numColors, event.target.value));\r\n  }\r\n  setNumColors(event) {\r\n    this.setState(this.getNewState(event.target.value, this.state.width));\r\n  }\r\n  updateHistory(game, auto, secret, guess, history, force_num_left) {\r\n    let result = game.check_guess(guess, secret);\r\n    history.push([guess, result]);\r\n    let num_left = \"\";\r\n    if (\r\n      force_num_left ||\r\n      auto.is_possible_guesses_computed(history) ||\r\n      Math.pow(game.valid_values.length, game.width) < 1e7\r\n    ) {\r\n      num_left = auto.get_num_possible_guesses(history);\r\n    }\r\n    history[history.length - 1].push(num_left);\r\n    return history;\r\n  }\r\n  handleNewGuess(guess) {\r\n    this.setState({\r\n      history: this.updateHistory(\r\n        this.state.game,\r\n        this.state.auto,\r\n        this.state.secret,\r\n        guess,\r\n        this.state.history.slice(),\r\n        false\r\n      )\r\n    });\r\n  }\r\n  getAutoGuess() {\r\n    return this.state.auto.make_guess(this.state.history);\r\n  }\r\n  newGame() {\r\n    this.setState({\r\n      secret: this.state.game.get_random_guess(),\r\n      history: [],\r\n      key: new Date(),\r\n      firstguess: null\r\n    });\r\n  }\r\n  newOneMoveGame() {\r\n    while (true) {\r\n      const secret = this.state.game.get_random_guess();\r\n      const history = [];\r\n      let num_left = 2;\r\n      while (num_left > 1) {\r\n        const guess = this.state.auto.make_random_guess(history);\r\n        this.updateHistory(\r\n          this.state.game,\r\n          this.state.auto,\r\n          secret,\r\n          guess,\r\n          history,\r\n          true\r\n        );\r\n        num_left = history[history.length - 1][2];\r\n      }\r\n      if (history[history.length - 1][1].exact !== this.state.game.width) {\r\n        this.setState({\r\n          secret: secret,\r\n          history: history,\r\n          key: new Date(),\r\n          firstguess: history[history.length - 1][0]\r\n        });\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const past_guesses = [];\r\n    for (let ii = 0; ii < this.state.history.length; ii++) {\r\n      past_guesses.push(\r\n        <Row\r\n          key={ii}\r\n          game={this.state.game}\r\n          guess={this.state.history[ii][0]}\r\n          result={this.state.history[ii][1]}\r\n          num_left={this.state.history[ii][2]}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <div key={this.state.key}>\r\n        <p>\r\n          Colors:\r\n          <EntryBox\r\n            value={this.state.numColors}\r\n            onChange={this.setNumColors.bind(this)}\r\n          />\r\n          Width:\r\n          <EntryBox\r\n            value={this.state.width}\r\n            onChange={this.setWidth.bind(this)}\r\n          />\r\n        </p>\r\n\r\n        <button onClick={() => this.newGame()}>New Game</button>\r\n        <button onClick={() => this.newOneMoveGame()}>New One Move Game</button>\r\n        <hr />\r\n        {past_guesses}\r\n        <hr />\r\n        <NextGuessRow\r\n          key={\"next\"}\r\n          game={this.state.game}\r\n          auto={this.getAutoGuess.bind(this)}\r\n          onSubmit={this.handleNewGuess.bind(this)}\r\n          guess={this.state.firstguess}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"React\"\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Mastermind!</h1>\r\n        <GameUI width={4} numColors={6} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}